#include <iostream>

using namespace std;

int position_queen(int q, int r, int n, int counter);
int position_rook(int q, int r, int n, int counter);

int main()
{
	int q;
	int r = 0;
	int n;
	int counter = 1;
	cin >> q;
	//cin >> r;
	cin >> n;
	cout << position_queen(q, r, n, counter) << endl;

}

int position_queen(int q, int r, int n, int counter)
{
	cout << "entry" << endl;
	if (q > n || r > n)
	{
		cout << "extra exit" << endl;
		return 0;
	}
	else if (n == 1)
	{
		cout << "n = 1 => counter = " << counter;
		return counter;
	}
	else if (n == 2 && r == 2)
	{
		cout << "2 rook in 2x2 field" << endl;
		return counter * 2;
	}
	else if (q > 1 && n > 1 || r > 1 && n > 1)
	{
		if (n > q)
		{
			cout << "1. (n > q) - true, 2: " << counter << " * " << n - 2 << " = " << counter * (n + n + n - 1 - 1) << endl;
			counter = counter * (3*n - 2);
		}
		else
		{
			cout << "1. (n > q) - false, 2: " << counter << "  * " << n - 2 << " = " << counter * (n + n + n - 1 - 1) << endl;
			counter = counter * (n + n + n - 1 - 1);
		}
		position_queen(q - 1, r, n - 1, counter);
	}
	else
	{
		cout << "exit with 0 :" << q << n << endl;
		return 0;
	}
}
	//cout << "1 : " << q << n << counter << endl;



int position_rook(int q, int r, int n, int counter)
{
	if (r > 1)
	{
		counter = counter * (2*n) ; // 1 * 8 = 8 // 8 * 3 * 3 = 72
		position_rook(q, r - 1, n - 1, counter);
	}
	else if (r == 1)
	{
		return counter * n * n;
	}
	else if (r == 0 || n == 1)
	{
		return counter;
	}
	else
	{
		cout << "exit with 0 :" << q << r << n << endl;
		return 0;
	}
}



/*
n* n - (n)- 2 * (n - 1) = 64 - 22 = 42 // 22
n * n - (n)-2 * (n - 1) = 42 - 19 = 33 // 17 
n * n - (n)-2 * (n - 1) = 33 - 16 = 17 // 10 
n * n - (n)-2 * (n - 1) = 17 - 13 = 4 // 6 
n * n - (n)-2 * (n - 1) = 4 - 10 = ... // 4
n * n - (n)-2 * (n - 1) = 4 - 10 = ... // 2
n * n - (n)-2 * (n - 1) = 4 - 10 = ... // 1
*/
